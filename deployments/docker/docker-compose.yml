services:
  postgres:
    container_name: postgres_db
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - postgres:/data/postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 3s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - backend_network
  migrate:
    image: migrate/migrate
    networks:
      - backend_network
    volumes:
      - ${POSTGRES_MIGRATIONS_PATH}:/migrations
    command: ["-path", "/migrations", "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable",  "up"]
    depends_on:
      postgres:
        condition: service_healthy

  backend:
    build:
      context: ../../backend
      dockerfile: deployments/docker/Dockerfile
    container_name: dockerlens_backend
    env_file:
      - ../../backend/.env
      - ../../database/postgres/.env
    ports:
      - "8080:8080"
    depends_on:
      migrate:
        condition: service_completed_successfully
    links:
      - postgres
    networks:
      - backend_network
    develop:
      watch:
        - path: ../../backend
          action: rebuild

  pinger:
    build:
      context: ../../pinger
      dockerfile: deployments/docker/Dockerfile
    container_name: dockerlens_pinger
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ../../pinger/.env
    depends_on:
      - backend
    networks:
      - backend_network
    develop:
      watch:
        - path: ../../pinger
          action: rebuild

volumes:
  postgres:

networks:
  backend_network:
    driver: bridge